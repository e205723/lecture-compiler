From: Yoshiaki Sano <e205723@ie.u-ryukyu.ac.jp>
Subject: Report on Compiler construction Lecture Exercise 1.1
Date: February 12, 2023 at 9:13:31 PM GMT+9
To: Shinji KONO <kono@ie.u-ryukyu.ac.jp>

課題の提出方法に「Report on Compiler consturction Lecture Exercise 1.1」というSubjectで提出するように指示がありましたが、consturctionがスペルがconstructionと違うので、題名のconstructionのスペルを訂正したものとしてないもので2つ送信します。どちらもメールを受け取ってしまっている場合は申し訳ありません。

sample.cという名前の、以下のような内容のファイルを作成し、作業をした
```
extern int printf(const char *,...);
#define TYPE int
TYPE f(TYPE a, TYPE b) {
    return a + b;
}
int main()
{
    TYPE a = 1;
    TYPE b = 2;
    printf("%x = %x + %x \n",f(a,b),a,b);
    return 0;
}
```

---

## (1) cpp

```
   clang -E

での出力を調べる。
変換されている部分はどこか。 printf を protoptype ではなく #include <stdio.h> で定義した時はどうなるか。
```

`$ clang -E sample.c`を実行する

```
# 1 "sample.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 368 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "sample.c" 2
extern int printf(const char *,...);

int f(int a, int b) {
    return a + b;
}
int main()
{
    int a = 1;
    int b = 2;
    printf("%x = %x + %x \n",f(a,b),a,b);
    return 0;
}
```

- `#define TYPE int`によって「TYPE」が「int」にマクロ展開されている
- インクルードファイルが展開されている

sample2.cというファイル名で中身が以下のファイルを用意する

printf を protoptype ではなく #include <stdio.h> で定義したファイルである

```
#include <stdio.h>
#define TYPE int
TYPE f(TYPE a, TYPE b) {
    return a + b;
}
int main()
{
    TYPE a = 1;
    TYPE b = 2;
    printf("%x = %x + %x \n",f(a,b),a,b);
    return 0;
}
```

`$ clang -E sample2.c`を実行する

出力は、長すぎたので割愛

\#include <stdio.h>でstdio.hというヘッダファイルがインクルードされ、そこに含まれるprintfなどの標準入出力関数のプロトタイプ宣言によって、「printf」関数に関する詳細な情報が展開されているのが原因

---

## (2) アセンブラ

```
   clang -S  -O0

で出力されるアセンブラについて調べる。
   clang -S  -O

についても調べる。
関数f はどうなっているか。
```

`$ clang -S -O0 sample.c`

でアセンブラを出力し、sample.sというファイルに書き込む

```
.section __TEXT,__text,regular,pure_instructions
.build_version macos, 12, 0 sdk_version 12, 0
.globl _f                              ## -- Begin function f
.p2align 4, 0x90
_f:                                     ## @f
.cfi_startproc
## %bb.0:
pushq %rbp
.cfi_def_cfa_offset 16
.cfi_offset %rbp, -16
movq %rsp, %rbp
.cfi_def_cfa_register %rbp
movl %edi, -4(%rbp)
movl %esi, -8(%rbp)
movl -4(%rbp), %eax
addl -8(%rbp), %eax
popq %rbp
retq
.cfi_endproc
                                        ## -- End function
.globl _main                           ## -- Begin function main
.p2align 4, 0x90
_main:                                  ## @main
.cfi_startproc
## %bb.0:
pushq %rbp
.cfi_def_cfa_offset 16
.cfi_offset %rbp, -16
movq %rsp, %rbp
.cfi_def_cfa_register %rbp
subq $16, %rsp
movl $0, -4(%rbp)
movl $1, -8(%rbp)
movl $2, -12(%rbp)
movl -8(%rbp), %edi
movl -12(%rbp), %esi
callq _f
movl %eax, %esi
movl -8(%rbp), %edx
movl -12(%rbp), %ecx
leaq L_.str(%rip), %rdi
movb $0, %al
callq _printf
xorl %eax, %eax
addq $16, %rsp
popq %rbp
retq
.cfi_endproc
                                        ## -- End function
.section __TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
.asciz "%x = %x + %x \n"

.subsections_via_symbols
```

C言語のソースコードsample.cがアセンブラ言語（x86_64アセンブラ）に変換されている。

f関数は、レジスタ%ediと%esiから引数aとbを取り出し、それらをメモリアドレス-4(%rbp)と-8(%rbp)に保存する。次に、-4(%rbp)と-8(%rbp)を加算し、その結果をレジスタ%eaxに格納する。最後に、%eaxに格納された値を返すために、retqで関数からのリターンを行う。

`$ mv sample.s sample.O0.s`でsample.sをsample.O0.sというファイル名にする

`$ clang -S -O sample.c`で最適化レベルを1にしている

O0は最適化レベルを0（最小）に設定し、最適化を行わないが、このため、生成されたアセンブラコードは実行速度が遅い可能性がある、しかし、デバッグやトラブルシューティングに役立つことがある

Oは最適化レベルを1に設定し、最適化を行う。このため、生成されたアセンブラコードは実行速度が速い可能性があるが、デバッグやトラブルシューティングには不向きである

`$ mv sample.s sample.O.s`を実行し、sample.O0.sとファイル名を区別できるようにした

sample.O.sの中身は以下のようになっている

```
.section __TEXT,__text,regular,pure_instructions
.build_version macos, 12, 0 sdk_version 12, 0
.globl _f                              ## -- Begin function f
.p2align 4, 0x90
_f:                                     ## @f
.cfi_startproc
## %bb.0:
pushq %rbp
.cfi_def_cfa_offset 16
.cfi_offset %rbp, -16
movq %rsp, %rbp
.cfi_def_cfa_register %rbp
                                        ## kill: def $esi killed $esi def $rsi
                                        ## kill: def $edi killed $edi def $rdi
leal (%rdi,%rsi), %eax
popq %rbp
retq
.cfi_endproc
                                        ## -- End function
.globl _main                           ## -- Begin function main
.p2align 4, 0x90
_main:                                  ## @main
.cfi_startproc
## %bb.0:
pushq %rbp
.cfi_def_cfa_offset 16
.cfi_offset %rbp, -16
movq %rsp, %rbp
.cfi_def_cfa_register %rbp
movl $1, %edi
movl $2, %esi
callq _f
leaq L_.str(%rip), %rdi
movl %eax, %esi
movl $1, %edx
movl $2, %ecx
xorl %eax, %eax
callq _printf
xorl %eax, %eax
popq %rbp
retq
.cfi_endproc
                                        ## -- End function
.section __TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
.asciz "%x = %x + %x \n"

.subsections_via_symbols
```

-Oオプションで最適化したアセンブラの関数fも-O0オプションで最適化したアセンブラの関数fも実装は変わらない

## (3) LLVM byte code

```
   clang  -emit-llvm -S

LLVM バイトコードの出力が得られることを確認せよ。
アセンブラとの対応を示せ。
```

`$ clang  -emit-llvm -S sample.c`でLLVM バイトコードをsample.llに出力する

出力は以下のようなもの

```
; ModuleID = 'sample.c'
source_filename = "sample.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx12.0.0"

@.str = private unnamed_addr constant [15 x i8] c"%x = %x + %x \0A\00", align 1

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @f(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %4 = load i32, i32* %2, align 4
  %5 = load i32, i32* %3, align 4
  %6 = call i32 @f(i32 %4, i32 %5)
  %7 = load i32, i32* %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 %6, i32 %7, i32 %8)
  ret i32 0
}

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind optnone ssp uwtable "darwin-stkchk-strong-link" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "probe-stack"="___chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "darwin-stkchk-strong-link" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "probe-stack"="___chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 12, i32 0]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 7, !"PIC Level", i32 2}
!3 = !{!"Apple clang version 13.0.0 (clang-1300.0.29.3)"}
```

関数fの実装に限定して、アセンブラとLLVMバイトコードの対応を表にして説明する

| アセンブラ | LLVMバイトコード | 説明 |
|---|---|---|
| _f: | define i32 @f(i32 %0, i32 %1) #0 { | 関数fの定義 |
| pushq %rbp | %3 = alloca i32, align 4 | フレームポインタを退避 |
| movq %rsp, %rbp | %4 = alloca i32, align 4 | フレームポインタをセット |
| movl %edi, -4(%rbp) | store i32 %0, i32* %3, align 4 | 第一引数を格納 |
| movl %esi, -8(%rbp) | store i32 %1, i32* %4, align 4 | 第二引数を格納 |
| movl -4(%rbp), %eax | %5 = load i32, i32* %3, align 4 | 第一引数をレジスタにロード |
| addl -8(%rbp), %eax | %6 = load i32, i32* %4, align 4 | 第二引数をレジスタにロード |
| popq %rbp | %7 = add nsw i32 %5, %6 | 加算実行 |
| retq | ret i32 %7 | 関数からの返却 |
| .cfi_endproc | } | 関数の終了 |

## (4) a.out

```
出力される a.out を otool を使って調べる。
```

`$ clang sample.c`を実行して、a.outというファイルを出力する

`$ otool -tv a.out`を実行

```
a.out:
(__TEXT,__text) section
_f:
0000000100003f20        pushq   %rbp
0000000100003f21        movq    %rsp, %rbp
0000000100003f24        movl    %edi, -0x4(%rbp)
0000000100003f27        movl    %esi, -0x8(%rbp)
0000000100003f2a        movl    -0x4(%rbp), %eax
0000000100003f2d        addl    -0x8(%rbp), %eax
0000000100003f30        popq    %rbp
0000000100003f31        retq
0000000100003f32        nopw    %cs:(%rax,%rax)
0000000100003f3c        nopl    (%rax)
_main:
0000000100003f40        pushq   %rbp
0000000100003f41        movq    %rsp, %rbp
0000000100003f44        subq    $0x10, %rsp
0000000100003f48        movl    $0x0, -0x4(%rbp)
0000000100003f4f        movl    $0x1, -0x8(%rbp)
0000000100003f56        movl    $0x2, -0xc(%rbp)
0000000100003f5d        movl    -0x8(%rbp), %edi
0000000100003f60        movl    -0xc(%rbp), %esi
0000000100003f63        callq   0x100003f20
0000000100003f68        movl    %eax, %esi
0000000100003f6a        movl    -0x8(%rbp), %edx
0000000100003f6d        movl    -0xc(%rbp), %ecx
0000000100003f70        leaq    0x2f(%rip), %rdi
0000000100003f77        movb    $0x0, %al
0000000100003f79        callq   0x100003f86
0000000100003f7e        xorl    %eax, %eax
0000000100003f80        addq    $0x10, %rsp
0000000100003f84        popq    %rbp
0000000100003f85        retq
```

各命令のメモリアドレスと対応するアセンブラが一緒に出力される

## ARMアセンブラ

```
  -arch arm を付けて、ARMのアセンブラの出力を調べよ
  -arch i386
  -arch x86_64
   clang -print-targets
```

**arm**

`$ clang -arch arm -S sample.c`を実行し、armのアセンブラをsample.sに出力する
`$ $ mv sample.s sample.arm.s`を実行して、ファイル名を変更する

sample.arm.sの中身

```
.section __TEXT,__text,regular,pure_instructions
.build_version macos, 12, 0 sdk_version 12, 0
.syntax unified
.globl _f                              @ -- Begin function f
.p2align 2
.code 32                              @ @f
_f:
@ %bb.0:
sub sp, sp, #8
str r0, [sp, #4]
str r1, [sp]
ldr r0, [sp, #4]
ldr r1, [sp]
add r0, r0, r1
add sp, sp, #8
bx lr
                                        @ -- End function
.globl _main                           @ -- Begin function main
.p2align 2
.code 32                              @ @main
_main:
@ %bb.0:
push {r7, lr}
mov r7, sp
sub sp, sp, #16
mov r0, #0
str r0, [sp]                        @ 4-byte Spill
str r0, [r7, #-4]
mov r0, #1
str r0, [sp, #8]
mov r0, #2
str r0, [sp, #4]
ldr r0, [sp, #8]
ldr r1, [sp, #4]
bl _f
mov r1, r0
ldr r2, [sp, #8]
ldr r3, [sp, #4]
ldr r0, LCPI1_0
LPC1_0:
add r0, pc, r0
bl _printf
                                        @ kill: def $r1 killed $r0
ldr r0, [sp]                        @ 4-byte Reload
mov sp, r7
pop {r7, lr}
bx lr
.p2align 2
@ %bb.1:
.data_region
LCPI1_0:
.long L_.str-(LPC1_0+8)
.end_data_region
                                        @ -- End function
.section __TEXT,__cstring,cstring_literals
L_.str:                                 @ @.str
.asciz "%x = %x + %x \n"

.subsections_via_symbols
```

**i386**

`$ clang -arch i386 -S sample.c`を実行し、i386のアセンブラをsample.sに出力する
`$ $ mv sample.s sample.i386.s`を実行して、ファイル名を変更する

sample.i386.sの中身
```
.section __TEXT,__text,regular,pure_instructions
.build_version macos, 12, 0 sdk_version 12, 0
.globl _f                              ## -- Begin function f
.p2align 4, 0x90
_f:                                     ## @f
.cfi_startproc
## %bb.0:
pushl %ebp
.cfi_def_cfa_offset 8
.cfi_offset %ebp, -8
movl %esp, %ebp
.cfi_def_cfa_register %ebp
movl 12(%ebp), %eax
movl 8(%ebp), %eax
movl 8(%ebp), %eax
addl 12(%ebp), %eax
popl %ebp
retl
.cfi_endproc
                                        ## -- End function
.globl _main                           ## -- Begin function main
.p2align 4, 0x90
_main:                                  ## @main
.cfi_startproc
## %bb.0:
pushl %ebp
.cfi_def_cfa_offset 8
.cfi_offset %ebp, -8
movl %esp, %ebp
.cfi_def_cfa_register %ebp
pushl %esi
subl $36, %esp
.cfi_offset %esi, -12
calll L1$pb
L1$pb:
popl %eax
movl %eax, -20(%ebp)                 ## 4-byte Spill
movl $0, -8(%ebp)
movl $1, -12(%ebp)
movl $2, -16(%ebp)
movl -12(%ebp), %ecx
movl -16(%ebp), %eax
movl %ecx, (%esp)
movl %eax, 4(%esp)
calll _f
movl %eax, %edx
movl -20(%ebp), %eax                 ## 4-byte Reload
leal L_.str-L1$pb(%eax), %esi
movl -12(%ebp), %ecx
movl -16(%ebp), %eax
movl %esi, (%esp)
movl %edx, 4(%esp)
movl %ecx, 8(%esp)
movl %eax, 12(%esp)
calll _printf
xorl %eax, %eax
addl $36, %esp
popl %esi
popl %ebp
retl
.cfi_endproc
                                        ## -- End function
.section __TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
.asciz "%x = %x + %x \n"

.subsections_via_symbols

```

**x86_64**

`$ clang -arch x86_64 -S sample.c`を実行し、x86_64のアセンブラをsample.sに出力する
`$ $ mv sample.s sample.x86_64.s`を実行して、ファイル名を変更する

sample.x86_64.sの中身
```
.section __TEXT,__text,regular,pure_instructions
.build_version macos, 12, 0 sdk_version 12, 0
.globl _f                              ## -- Begin function f
.p2align 4, 0x90
_f:                                     ## @f
.cfi_startproc
## %bb.0:
pushq %rbp
.cfi_def_cfa_offset 16
.cfi_offset %rbp, -16
movq %rsp, %rbp
.cfi_def_cfa_register %rbp
movl %edi, -4(%rbp)
movl %esi, -8(%rbp)
movl -4(%rbp), %eax
addl -8(%rbp), %eax
popq %rbp
retq
.cfi_endproc
                                        ## -- End function
.globl _main                           ## -- Begin function main
.p2align 4, 0x90
_main:                                  ## @main
.cfi_startproc
## %bb.0:
pushq %rbp
.cfi_def_cfa_offset 16
.cfi_offset %rbp, -16
movq %rsp, %rbp
.cfi_def_cfa_register %rbp
subq $16, %rsp
movl $0, -4(%rbp)
movl $1, -8(%rbp)
movl $2, -12(%rbp)
movl -8(%rbp), %edi
movl -12(%rbp), %esi
callq _f
movl %eax, %esi
movl -8(%rbp), %edx
movl -12(%rbp), %ecx
leaq L_.str(%rip), %rdi
movb $0, %al
callq _printf
xorl %eax, %eax
addq $16, %rsp
popq %rbp
retq
.cfi_endproc
                                        ## -- End function
.section __TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
.asciz "%x = %x + %x \n"

.subsections_via_symbols
```

**clang -print-targets**

`$ clang -print-targets`を実行するとclangコンパイラにサポートされているターゲットアーキテクチャのリストが出力された

```
  Registered Targets:
    aarch64    - AArch64 (little endian)
    aarch64_32 - AArch64 (little endian ILP32)
    aarch64_be - AArch64 (big endian)
    arm        - ARM
    arm64      - ARM64 (little endian)
    arm64_32   - ARM64 (little endian ILP32)
    armeb      - ARM (big endian)
    thumb      - Thumb
    thumbeb    - Thumb (big endian)
    x86        - 32-bit X86: Pentium-Pro and above
    x86-64     - 64-bit X86: EM64T and AMD64
```
